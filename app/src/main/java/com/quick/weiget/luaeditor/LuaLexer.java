/* The following code was generated by JFlex 1.6.1 */

package com.quick.weiget.luaeditor;

import static com.quick.weiget.luaeditor.LuaTokenTypes.AND;
import static com.quick.weiget.luaeditor.LuaTokenTypes.ASSIGN;
import static com.quick.weiget.luaeditor.LuaTokenTypes.AT;
import static com.quick.weiget.luaeditor.LuaTokenTypes.BAD_CHARACTER;
import static com.quick.weiget.luaeditor.LuaTokenTypes.BIT_AND;
import static com.quick.weiget.luaeditor.LuaTokenTypes.BIT_LTLT;
import static com.quick.weiget.luaeditor.LuaTokenTypes.BIT_OR;
import static com.quick.weiget.luaeditor.LuaTokenTypes.BIT_RTRT;
import static com.quick.weiget.luaeditor.LuaTokenTypes.BIT_TILDE;
import static com.quick.weiget.luaeditor.LuaTokenTypes.BLOCK_COMMENT;
import static com.quick.weiget.luaeditor.LuaTokenTypes.BREAK;
import static com.quick.weiget.luaeditor.LuaTokenTypes.CASE;
import static com.quick.weiget.luaeditor.LuaTokenTypes.CATCH;
import static com.quick.weiget.luaeditor.LuaTokenTypes.COLON;
import static com.quick.weiget.luaeditor.LuaTokenTypes.COMMA;
import static com.quick.weiget.luaeditor.LuaTokenTypes.CONCAT;
import static com.quick.weiget.luaeditor.LuaTokenTypes.CONTINUE;
import static com.quick.weiget.luaeditor.LuaTokenTypes.DEFAULT;
import static com.quick.weiget.luaeditor.LuaTokenTypes.DEFER;
import static com.quick.weiget.luaeditor.LuaTokenTypes.DIV;
import static com.quick.weiget.luaeditor.LuaTokenTypes.DO;
import static com.quick.weiget.luaeditor.LuaTokenTypes.DOC_COMMENT;
import static com.quick.weiget.luaeditor.LuaTokenTypes.DOT;
import static com.quick.weiget.luaeditor.LuaTokenTypes.DOUBLE_COLON;
import static com.quick.weiget.luaeditor.LuaTokenTypes.DOUBLE_DIV;
import static com.quick.weiget.luaeditor.LuaTokenTypes.ELLIPSIS;
import static com.quick.weiget.luaeditor.LuaTokenTypes.ELSE;
import static com.quick.weiget.luaeditor.LuaTokenTypes.ELSEIF;
import static com.quick.weiget.luaeditor.LuaTokenTypes.END;
import static com.quick.weiget.luaeditor.LuaTokenTypes.ENDREGION;
import static com.quick.weiget.luaeditor.LuaTokenTypes.EQ;
import static com.quick.weiget.luaeditor.LuaTokenTypes.EXP;
import static com.quick.weiget.luaeditor.LuaTokenTypes.FALSE;
import static com.quick.weiget.luaeditor.LuaTokenTypes.FINALLY;
import static com.quick.weiget.luaeditor.LuaTokenTypes.FOR;
import static com.quick.weiget.luaeditor.LuaTokenTypes.FUNCTION;
import static com.quick.weiget.luaeditor.LuaTokenTypes.GE;
import static com.quick.weiget.luaeditor.LuaTokenTypes.GETN;
import static com.quick.weiget.luaeditor.LuaTokenTypes.GOTO;
import static com.quick.weiget.luaeditor.LuaTokenTypes.GT;
import static com.quick.weiget.luaeditor.LuaTokenTypes.IF;
import static com.quick.weiget.luaeditor.LuaTokenTypes.IN;
import static com.quick.weiget.luaeditor.LuaTokenTypes.LAMBDA;
import static com.quick.weiget.luaeditor.LuaTokenTypes.LBRACK;
import static com.quick.weiget.luaeditor.LuaTokenTypes.LCURLY;
import static com.quick.weiget.luaeditor.LuaTokenTypes.LE;
import static com.quick.weiget.luaeditor.LuaTokenTypes.LEF;
import static com.quick.weiget.luaeditor.LuaTokenTypes.LOCAL;
import static com.quick.weiget.luaeditor.LuaTokenTypes.LONG_STRING;
import static com.quick.weiget.luaeditor.LuaTokenTypes.LPAREN;
import static com.quick.weiget.luaeditor.LuaTokenTypes.LT;
import static com.quick.weiget.luaeditor.LuaTokenTypes.MEAN;
import static com.quick.weiget.luaeditor.LuaTokenTypes.MINUS;
import static com.quick.weiget.luaeditor.LuaTokenTypes.MOD;
import static com.quick.weiget.luaeditor.LuaTokenTypes.MULT;
import static com.quick.weiget.luaeditor.LuaTokenTypes.NAME;
import static com.quick.weiget.luaeditor.LuaTokenTypes.NE;
import static com.quick.weiget.luaeditor.LuaTokenTypes.NEW_LINE;
import static com.quick.weiget.luaeditor.LuaTokenTypes.NIL;
import static com.quick.weiget.luaeditor.LuaTokenTypes.NOT;
import static com.quick.weiget.luaeditor.LuaTokenTypes.NUMBER;
import static com.quick.weiget.luaeditor.LuaTokenTypes.OR;
import static com.quick.weiget.luaeditor.LuaTokenTypes.PLUS;
import static com.quick.weiget.luaeditor.LuaTokenTypes.RBRACK;
import static com.quick.weiget.luaeditor.LuaTokenTypes.RCURLY;
import static com.quick.weiget.luaeditor.LuaTokenTypes.REGION;
import static com.quick.weiget.luaeditor.LuaTokenTypes.REPEAT;
import static com.quick.weiget.luaeditor.LuaTokenTypes.RETURN;
import static com.quick.weiget.luaeditor.LuaTokenTypes.RPAREN;
import static com.quick.weiget.luaeditor.LuaTokenTypes.SEMI;
import static com.quick.weiget.luaeditor.LuaTokenTypes.SHEBANG;
import static com.quick.weiget.luaeditor.LuaTokenTypes.SHEBANG_CONTENT;
import static com.quick.weiget.luaeditor.LuaTokenTypes.SHORT_COMMENT;
import static com.quick.weiget.luaeditor.LuaTokenTypes.STRING;
import static com.quick.weiget.luaeditor.LuaTokenTypes.SWITCH;
import static com.quick.weiget.luaeditor.LuaTokenTypes.THEN;
import static com.quick.weiget.luaeditor.LuaTokenTypes.TRUE;
import static com.quick.weiget.luaeditor.LuaTokenTypes.TRY;
import static com.quick.weiget.luaeditor.LuaTokenTypes.UNTIL;
import static com.quick.weiget.luaeditor.LuaTokenTypes.WHEN;
import static com.quick.weiget.luaeditor.LuaTokenTypes.WHILE;
import static com.quick.weiget.luaeditor.LuaTokenTypes.WHITE_SPACE;

import java.io.IOException;
import java.io.Reader;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>D:/JFLEX/bin/lua.flex</tt>
 */
public class LuaLexer {

    /** This character denotes the end of file */
    public static final int YYEOF = -1;

    /** initial size of the lookahead buffer */
    private static final int ZZ_BUFFERSIZE = 16384;

    /** lexical states */
    public static final int YYINITIAL = 0;
    public static final int xSHEBANG = 2;
    public static final int xDOUBLE_QUOTED_STRING = 4;
    public static final int xSINGLE_QUOTED_STRING = 6;
    public static final int xBLOCK_STRING = 8;
    public static final int xCOMMENT = 10;
    public static final int xBLOCK_COMMENT = 12;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     *                  at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
    };

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED =
            "\11\34\1\3\1\2\1\0\1\3\1\1\16\34\4\33\1\3\1\53"+
                    "\1\31\1\52\1\4\1\60\1\72\1\35\1\62\1\63\1\57\1\11"+
                    "\1\66\1\16\1\15\1\61\1\13\11\6\1\70\1\67\1\55\1\27"+
                    "\1\54\1\33\1\76\4\7\1\10\1\7\11\4\1\12\7\4\1\14"+
                    "\2\4\1\26\1\32\1\30\1\71\1\4\1\33\1\36\1\37\1\45"+
                    "\1\25\1\20\1\43\1\21\1\50\1\22\1\4\1\40\1\41\1\74"+
                    "\1\24\1\23\1\47\1\4\1\17\1\42\1\46\1\44\1\4\1\51"+
                    "\1\14\1\75\1\4\1\64\1\73\1\65\1\56\6\34\1\5\32\34"+
                    "\1\0\1\33\4\4\4\33\1\4\2\33\1\34\7\33\1\4\4\33"+
                    "\1\4\5\33\27\4\1\33\37\4\1\33\u01ca\4\4\33\14\4\16\33"+
                    "\5\4\7\33\1\4\1\33\1\4\21\33\160\34\5\4\1\33\2\4"+
                    "\2\33\4\4\10\33\1\4\1\33\3\4\1\33\1\4\1\33\24\4"+
                    "\1\33\123\4\1\33\213\4\1\33\5\34\2\33\236\4\11\33\46\4"+
                    "\2\33\1\4\7\33\47\4\7\33\1\4\1\33\55\34\1\33\1\34"+
                    "\1\33\2\34\1\33\2\34\1\33\1\34\10\33\33\4\5\33\3\4"+
                    "\15\33\5\34\6\33\1\4\4\33\13\34\5\33\53\4\37\34\4\33"+
                    "\2\4\1\34\143\4\1\33\1\4\10\34\1\33\6\34\2\4\2\34"+
                    "\1\33\4\34\2\4\12\34\3\4\2\33\1\4\17\33\1\34\1\4"+
                    "\1\34\36\4\33\34\2\33\131\4\13\34\1\4\16\33\12\34\41\4"+
                    "\11\34\2\4\4\33\1\4\5\33\26\4\4\34\1\4\11\34\1\4"+
                    "\3\34\1\4\5\34\22\33\31\4\3\34\104\33\1\4\1\33\13\4"+
                    "\67\33\33\34\1\33\4\34\66\4\3\34\1\4\22\34\1\4\7\34"+
                    "\12\4\2\34\2\33\12\34\1\33\7\4\1\33\7\4\1\33\3\34"+
                    "\1\33\10\4\2\33\2\4\2\33\26\4\1\33\7\4\1\33\1\4"+
                    "\3\33\4\4\2\33\1\34\1\4\7\34\2\33\2\34\2\33\3\34"+
                    "\1\4\10\33\1\34\4\33\2\4\1\33\3\4\2\34\2\33\12\34"+
                    "\4\4\7\33\1\4\5\33\3\34\1\33\6\4\4\33\2\4\2\33"+
                    "\26\4\1\33\7\4\1\33\2\4\1\33\2\4\1\33\2\4\2\33"+
                    "\1\34\1\33\5\34\4\33\2\34\2\33\3\34\3\33\1\34\7\33"+
                    "\4\4\1\33\1\4\7\33\14\34\3\4\1\34\13\33\3\34\1\33"+
                    "\11\4\1\33\3\4\1\33\26\4\1\33\7\4\1\33\2\4\1\33"+
                    "\5\4\2\33\1\34\1\4\10\34\1\33\3\34\1\33\3\34\2\33"+
                    "\1\4\17\33\2\4\2\34\2\33\12\34\1\33\1\4\17\33\3\34"+
                    "\1\33\10\4\2\33\2\4\2\33\26\4\1\33\7\4\1\33\2\4"+
                    "\1\33\5\4\2\33\1\34\1\4\7\34\2\33\2\34\2\33\3\34"+
                    "\10\33\2\34\4\33\2\4\1\33\3\4\2\34\2\33\12\34\1\33"+
                    "\1\4\20\33\1\34\1\4\1\33\6\4\3\33\3\4\1\33\4\4"+
                    "\3\33\2\4\1\33\1\4\1\33\2\4\3\33\2\4\3\33\3\4"+
                    "\3\33\14\4\4\33\5\34\3\33\3\34\1\33\4\34\2\33\1\4"+
                    "\6\33\1\34\16\33\12\34\11\33\1\4\7\33\3\34\1\33\10\4"+
                    "\1\33\3\4\1\33\27\4\1\33\12\4\1\33\5\4\3\33\1\4"+
                    "\7\34\1\33\3\34\1\33\4\34\7\33\2\34\1\33\2\4\6\33"+
                    "\2\4\2\34\2\33\12\34\22\33\2\34\1\33\10\4\1\33\3\4"+
                    "\1\33\27\4\1\33\12\4\1\33\5\4\2\33\1\34\1\4\7\34"+
                    "\1\33\3\34\1\33\4\34\7\33\2\34\7\33\1\4\1\33\2\4"+
                    "\2\34\2\33\12\34\1\33\2\4\17\33\2\34\1\33\10\4\1\33"+
                    "\3\4\1\33\51\4\2\33\1\4\7\34\1\33\3\34\1\33\4\34"+
                    "\1\4\10\33\1\34\10\33\2\4\2\34\2\33\12\34\12\33\6\4"+
                    "\2\33\2\34\1\33\22\4\3\33\30\4\1\33\11\4\1\33\1\4"+
                    "\2\33\7\4\3\33\1\34\4\33\6\34\1\33\1\34\1\33\10\34"+
                    "\22\33\2\34\15\33\60\4\1\34\2\4\7\34\4\33\10\4\10\34"+
                    "\1\33\12\34\47\33\2\4\1\33\1\4\2\33\2\4\1\33\1\4"+
                    "\2\33\1\4\6\33\4\4\1\33\7\4\1\33\3\4\1\33\1\4"+
                    "\1\33\1\4\2\33\2\4\1\33\4\4\1\34\2\4\6\34\1\33"+
                    "\2\34\1\4\2\33\5\4\1\33\1\4\1\33\6\34\2\33\12\34"+
                    "\2\33\4\4\40\33\1\4\27\33\2\34\6\33\12\34\13\33\1\34"+
                    "\1\33\1\34\1\33\1\34\4\33\2\34\10\4\1\33\44\4\4\33"+
                    "\24\34\1\33\2\34\5\4\13\34\1\33\44\34\11\33\1\34\71\33"+
                    "\53\4\24\34\1\4\12\34\6\33\6\4\4\34\4\4\3\34\1\4"+
                    "\3\34\2\4\7\34\3\4\4\34\15\4\14\34\1\4\17\34\2\33"+
                    "\46\4\1\33\1\4\5\33\1\4\2\33\53\4\1\33\u014d\4\1\33"+
                    "\4\4\2\33\7\4\1\33\1\4\1\33\4\4\2\33\51\4\1\33"+
                    "\4\4\2\33\41\4\1\33\4\4\2\33\7\4\1\33\1\4\1\33"+
                    "\4\4\2\33\17\4\1\33\71\4\1\33\4\4\2\33\103\4\2\33"+
                    "\3\34\40\33\20\4\20\33\125\4\14\33\u026c\4\2\33\21\4\1\0"+
                    "\32\4\5\33\113\4\3\33\3\4\17\33\15\4\1\33\4\4\3\34"+
                    "\13\33\22\4\3\34\13\33\22\4\2\34\14\33\15\4\1\33\3\4"+
                    "\1\33\2\34\14\33\64\4\40\34\3\33\1\4\3\33\2\4\1\34"+
                    "\2\33\12\34\41\33\3\34\2\33\12\34\6\33\130\4\10\33\51\4"+
                    "\1\34\1\4\5\33\106\4\12\33\35\4\3\33\14\34\4\33\14\34"+
                    "\12\33\12\34\36\4\2\33\5\4\13\33\54\4\4\33\21\34\7\4"+
                    "\2\34\6\33\12\34\46\33\27\4\5\34\4\33\65\4\12\34\1\33"+
                    "\35\34\2\33\13\34\6\33\12\34\15\33\1\4\130\33\5\34\57\4"+
                    "\21\34\7\4\4\33\12\34\21\33\11\34\14\33\3\34\36\4\15\34"+
                    "\2\4\12\34\54\4\16\34\14\33\44\4\24\34\10\33\12\34\3\33"+
                    "\3\4\12\34\44\4\122\33\3\34\1\33\25\34\4\4\1\34\4\4"+
                    "\3\34\2\4\11\33\300\4\47\34\25\33\4\34\u0116\4\2\33\6\4"+
                    "\2\33\46\4\2\33\6\4\2\33\10\4\1\33\1\4\1\33\1\4"+
                    "\1\33\1\4\1\33\37\4\2\33\65\4\1\33\7\4\1\33\1\4"+
                    "\3\33\3\4\1\33\7\4\3\33\4\4\2\33\6\4\4\33\15\4"+
                    "\5\33\3\4\1\33\7\4\3\33\13\0\5\34\30\33\2\0\5\34"+
                    "\1\0\17\33\2\4\23\33\1\4\12\33\1\0\5\34\5\33\6\34"+
                    "\1\33\1\4\15\33\1\4\20\33\15\4\3\33\33\4\25\33\15\34"+
                    "\4\33\1\34\3\33\14\34\21\33\1\4\4\33\1\4\2\33\12\4"+
                    "\1\33\1\4\3\33\5\4\6\33\1\4\1\33\1\4\1\33\1\4"+
                    "\1\33\4\4\1\33\13\4\2\33\4\4\5\33\5\4\4\33\1\4"+
                    "\21\33\51\4\u0a77\33\57\4\1\33\57\4\1\33\205\4\6\33\4\4"+
                    "\3\34\2\4\14\33\46\4\1\33\1\4\5\33\1\4\2\33\70\4"+
                    "\7\33\1\4\17\33\1\34\27\4\11\33\7\4\1\33\7\4\1\33"+
                    "\7\4\1\33\7\4\1\33\7\4\1\33\7\4\1\33\7\4\1\33"+
                    "\7\4\1\33\40\34\57\33\1\4\u01d0\33\1\0\4\33\3\4\31\33"+
                    "\11\4\6\34\1\33\5\4\2\33\5\4\4\33\126\4\2\33\2\34"+
                    "\2\33\3\4\1\33\132\4\1\33\4\4\5\33\51\4\3\33\136\4"+
                    "\21\33\33\4\65\33\20\4\u0200\33\u19b6\4\112\33\u51cd\4\63\33\u048d\4"+
                    "\103\33\56\4\2\33\u010d\4\3\33\20\4\12\34\2\4\24\33\57\4"+
                    "\1\34\4\33\12\34\1\33\31\4\7\33\1\34\120\4\2\34\45\33"+
                    "\11\4\2\33\147\4\2\33\4\4\1\33\4\4\14\33\13\4\115\33"+
                    "\12\4\1\34\3\4\1\34\4\4\1\34\27\4\5\34\20\33\1\4"+
                    "\7\33\64\4\14\33\2\34\62\4\21\34\13\33\12\34\6\33\22\34"+
                    "\6\4\3\33\1\4\4\33\12\34\34\4\10\34\2\33\27\4\15\34"+
                    "\14\33\35\4\3\33\4\34\57\4\16\34\16\33\1\4\12\34\46\33"+
                    "\51\4\16\34\11\33\3\4\1\34\10\4\2\34\2\33\12\34\6\33"+
                    "\27\4\3\33\1\4\1\34\4\33\60\4\1\34\1\4\3\34\2\4"+
                    "\2\34\5\4\2\34\1\4\1\34\1\4\30\33\3\4\2\33\13\4"+
                    "\5\34\2\33\3\4\2\34\12\33\6\4\2\33\6\4\2\33\6\4"+
                    "\11\33\7\4\1\33\7\4\221\33\43\4\10\34\1\33\2\34\2\33"+
                    "\12\34\6\33\u2ba4\4\14\33\27\4\4\33\61\4\u2104\33\u016e\4\2\33"+
                    "\152\4\46\33\7\4\14\33\5\4\5\33\1\4\1\34\12\4\1\33"+
                    "\15\4\1\33\5\4\1\33\1\4\1\33\2\4\1\33\2\4\1\33"+
                    "\154\4\41\33\u016b\4\22\33\100\4\2\33\66\4\50\33\15\4\3\33"+
                    "\20\34\20\33\7\34\14\33\2\4\30\33\3\4\31\33\1\4\6\33"+
                    "\5\4\1\33\207\4\2\33\1\34\4\33\1\4\13\33\12\34\7\33"+
                    "\32\4\4\33\1\4\1\33\32\4\13\33\131\4\3\33\6\4\2\33"+
                    "\6\4\2\33\6\4\2\33\3\4\3\33\2\4\3\33\2\4\22\33"+
                    "\3\34\4\33\14\4\1\33\32\4\1\33\23\4\1\33\2\4\1\33"+
                    "\17\4\2\33\16\4\42\33\173\4\105\33\65\4\210\33\1\34\202\33"+
                    "\35\4\3\33\61\4\57\33\37\4\21\33\33\4\65\33\36\4\2\33"+
                    "\44\4\4\33\10\4\1\33\5\4\52\33\236\4\2\33\12\34\u0356\33"+
                    "\6\4\2\33\1\4\1\33\54\4\1\33\2\4\3\33\1\4\2\33"+
                    "\27\4\252\33\26\4\12\33\32\4\106\33\70\4\6\33\2\4\100\33"+
                    "\1\4\3\34\1\33\2\34\5\33\4\34\4\4\1\33\3\4\1\33"+
                    "\33\4\4\33\3\34\4\33\1\34\40\33\35\4\203\33\66\4\12\33"+
                    "\26\4\12\33\23\4\215\33\111\4\u03b7\33\3\34\65\4\17\34\37\33"+
                    "\12\34\20\33\3\34\55\4\13\34\2\33\1\34\22\33\31\4\7\33"+
                    "\12\34\6\33\3\34\44\4\16\34\1\33\12\34\100\33\3\34\60\4"+
                    "\16\34\4\4\13\33\12\34\u04a6\33\53\4\15\34\10\33\12\34\u0936\33"+
                    "\u036f\4\221\33\143\4\u0b9d\33\u042f\4\u33d1\33\u0239\4\u04c7\33\105\4\13\33"+
                    "\1\4\56\34\20\33\4\34\15\4\u4060\33\2\4\u2163\33\5\34\3\33"+
                    "\26\34\2\33\7\34\36\33\4\34\224\33\3\34\u01bb\33\125\4\1\33"+
                    "\107\4\1\33\2\4\2\33\1\4\2\33\2\4\2\33\4\4\1\33"+
                    "\14\4\1\33\1\4\1\33\7\4\1\33\101\4\1\33\4\4\2\33"+
                    "\10\4\1\33\7\4\1\33\34\4\1\33\4\4\1\33\5\4\1\33"+
                    "\1\4\3\33\7\4\1\33\u0154\4\2\33\31\4\1\33\31\4\1\33"+
                    "\37\4\1\33\31\4\1\33\37\4\1\33\31\4\1\33\37\4\1\33"+
                    "\31\4\1\33\37\4\1\33\31\4\1\33\10\4\2\33\62\34\u1600\33"+
                    "\4\4\1\33\33\4\1\33\2\4\1\33\1\4\2\33\1\4\1\33"+
                    "\12\4\1\33\4\4\1\33\1\4\1\33\1\4\6\33\1\4\4\33"+
                    "\1\4\1\33\1\4\1\33\1\4\1\33\3\4\1\33\2\4\1\33"+
                    "\1\4\2\33\1\4\1\33\1\4\1\33\1\4\1\33\1\4\1\33"+
                    "\1\4\1\33\2\4\1\33\1\4\2\33\4\4\1\33\7\4\1\33"+
                    "\4\4\1\33\4\4\1\33\1\4\1\33\12\4\1\33\21\4\5\33"+
                    "\3\4\1\33\5\4\1\33\21\4\u1144\33\ua6d7\4\51\33\u1035\4\13\33"+
                    "\336\4\u3fe2\33\u021e\4\uffff\33\uffff\33\uffff\33\uffff\33\uffff\33\uffff\33\uffff\33\uffff\33\uffff\33\uffff\33\uffff\33\u05ee\33"+
                    "\1\34\36\33\140\34\200\33\360\34\uffff\33\uffff\33\ufe12\33";

    /**
     * Translates characters to character classes
     */
    private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int [] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\1\0\1\1\5\0\1\2\2\3\1\4\1\5\1\6"+
                    "\1\7\1\6\1\10\1\11\7\5\1\12\1\13\1\14"+
                    "\1\15\1\2\1\16\11\5\1\17\1\20\1\21\1\22"+
                    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
                    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\2\42"+
                    "\1\2\1\0\2\43\2\6\1\0\1\6\1\44\1\45"+
                    "\4\5\1\46\1\47\1\50\3\5\1\51\1\52\1\0"+
                    "\1\53\2\0\17\5\1\54\1\55\1\56\1\57\1\60"+
                    "\1\61\1\62\1\63\1\64\1\50\1\42\4\0\1\65"+
                    "\2\0\2\6\1\66\2\0\2\5\1\67\2\5\1\70"+
                    "\1\20\1\5\1\71\1\72\1\64\5\5\1\73\7\5"+
                    "\1\74\3\5\1\0\1\65\1\75\1\0\1\6\4\0"+
                    "\2\5\1\76\1\77\13\5\1\100\1\5\1\101\1\102"+
                    "\1\103\1\5\1\104\2\0\1\105\1\6\2\0\3\5"+
                    "\1\106\1\5\1\107\1\110\3\5\1\111\1\5\1\112"+
                    "\1\5\1\113\1\114\1\0\1\6\2\0\1\115\1\116"+
                    "\1\117\1\5\1\120\1\121\3\5\3\0\1\122\1\123"+
                    "\2\5\1\124\1\0\1\125\1\126\1\124\2\0\2\127";

    private static int [] zzUnpackAction() {
        int [] result = new int[234];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int [] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\77\0\176\0\275\0\374\0\u013b\0\u017a\0\u01b9"+
                    "\0\u01f8\0\u01b9\0\u0237\0\u0276\0\u02b5\0\u01b9\0\u02f4\0\u0333"+
                    "\0\u0372\0\u03b1\0\u03f0\0\u042f\0\u046e\0\u04ad\0\u04ec\0\u052b"+
                    "\0\u056a\0\u05a9\0\u01b9\0\u01b9\0\u05e8\0\u01b9\0\u0627\0\u0666"+
                    "\0\u06a5\0\u06e4\0\u0723\0\u0762\0\u07a1\0\u07e0\0\u081f\0\u085e"+
                    "\0\u089d\0\u08dc\0\u091b\0\u089d\0\u01b9\0\u01b9\0\u095a\0\u01b9"+
                    "\0\u01b9\0\u01b9\0\u01b9\0\u01b9\0\u01b9\0\u0999\0\u01b9\0\u09d8"+
                    "\0\u0a17\0\u01b9\0\u0a56\0\u0a95\0\u0ad4\0\u0b13\0\u01b9\0\u0b52"+
                    "\0\u0b91\0\u0bd0\0\u0c0f\0\u0c4e\0\u0c8d\0\u0ccc\0\u0d0b\0\u0d4a"+
                    "\0\u0d89\0\u0dc8\0\u0276\0\u0276\0\u0276\0\u0e07\0\u0e46\0\u0e85"+
                    "\0\u0276\0\u01b9\0\u056a\0\u01b9\0\u0ec4\0\u0f03\0\u0f42\0\u0f81"+
                    "\0\u0fc0\0\u0fff\0\u103e\0\u107d\0\u10bc\0\u10fb\0\u113a\0\u1179"+
                    "\0\u11b8\0\u11f7\0\u1236\0\u1275\0\u12b4\0\u01b9\0\u01b9\0\u01b9"+
                    "\0\u01b9\0\u01b9\0\u01b9\0\u01b9\0\u01b9\0\u01b9\0\u01b9\0\u01b9"+
                    "\0\u12f3\0\u1332\0\u1371\0\u0ad4\0\u13b0\0\u13ef\0\u0c4e\0\u142e"+
                    "\0\u146d\0\u01b9\0\u14ac\0\u14eb\0\u152a\0\u1569\0\u0276\0\u15a8"+
                    "\0\u15e7\0\u0276\0\u0276\0\u1626\0\u01b9\0\u01b9\0\u0276\0\u1665"+
                    "\0\u16a4\0\u16e3\0\u1722\0\u1761\0\u0276\0\u17a0\0\u17df\0\u181e"+
                    "\0\u185d\0\u189c\0\u18db\0\u191a\0\u0276\0\u1959\0\u1998\0\u19d7"+
                    "\0\u1a16\0\u1a55\0\u1a94\0\u1ad3\0\u1b12\0\u0b91\0\u1b51\0\u1b90"+
                    "\0\u1bcf\0\u1c0e\0\u1c4d\0\u1c8c\0\u0276\0\u1ccb\0\u1d0a\0\u1d49"+
                    "\0\u1d88\0\u1dc7\0\u1e06\0\u1e45\0\u1e84\0\u1ec3\0\u1f02\0\u1f41"+
                    "\0\u0276\0\u1f80\0\u0276\0\u0276\0\u0276\0\u1fbf\0\u1a16\0\u1ffe"+
                    "\0\u203d\0\u207c\0\u20bb\0\u20fa\0\u2139\0\u2178\0\u21b7\0\u21f6"+
                    "\0\u0276\0\u2235\0\u0276\0\u0276\0\u2274\0\u22b3\0\u22f2\0\u0276"+
                    "\0\u2331\0\u0276\0\u2370\0\u0276\0\u0276\0\u23af\0\u23ee\0\u242d"+
                    "\0\u246c\0\u0276\0\u0276\0\u0276\0\u24ab\0\u0276\0\u0276\0\u24ea"+
                    "\0\u2529\0\u2568\0\u25a7\0\u25e6\0\u2625\0\u0276\0\u0276\0\u2664"+
                    "\0\u26a3\0\u26e2\0\u2721\0\u0276\0\u0276\0\u2760\0\u279f\0\u27de"+
                    "\0\u281d\0\u285c";

    private static int [] zzUnpackRowMap() {
        int [] result = new int[234];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int [] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int [] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\10\1\11\1\12\1\13\1\14\1\10\1\15\2\14"+
                    "\1\16\1\14\1\17\1\14\1\20\1\21\1\22\1\23"+
                    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
                    "\1\34\1\35\2\10\1\36\1\37\1\40\1\14\1\41"+
                    "\1\42\1\43\1\44\1\45\1\46\2\14\1\47\1\50"+
                    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
                    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
                    "\1\71\2\14\1\72\1\2\2\0\74\2\31\0\1\73"+
                    "\102\0\1\74\41\0\26\10\1\75\50\10\16\0\1\76"+
                    "\60\0\16\77\1\100\60\77\101\0\1\12\77\0\1\13"+
                    "\77\0\5\14\1\0\3\14\2\0\7\14\6\0\1\14"+
                    "\1\0\14\14\22\0\2\14\7\0\1\15\1\0\1\101"+
                    "\2\0\1\15\1\0\1\102\2\0\1\101\64\0\1\15"+
                    "\1\0\1\101\2\0\1\15\1\103\1\102\2\0\1\101"+
                    "\64\0\1\104\4\0\1\104\1\0\1\105\77\0\1\106"+
                    "\64\0\5\14\1\0\3\14\2\0\1\14\1\107\5\14"+
                    "\6\0\1\14\1\0\14\14\22\0\2\14\5\0\5\14"+
                    "\1\0\3\14\2\0\5\14\1\110\1\14\6\0\1\14"+
                    "\1\0\3\14\1\111\10\14\22\0\2\14\5\0\5\14"+
                    "\1\0\3\14\2\0\4\14\1\112\2\14\6\0\1\14"+
                    "\1\0\14\14\22\0\2\14\5\0\5\14\1\0\3\14"+
                    "\2\0\5\14\1\113\1\14\6\0\1\14\1\0\5\14"+
                    "\1\114\6\14\22\0\2\14\5\0\5\14\1\0\3\14"+
                    "\2\0\1\115\6\14\6\0\1\14\1\0\14\14\22\0"+
                    "\2\14\5\0\5\14\1\0\3\14\2\0\3\14\1\116"+
                    "\1\117\2\14\6\0\1\14\1\0\14\14\22\0\2\14"+
                    "\5\0\5\14\1\0\3\14\2\0\1\14\1\120\2\14"+
                    "\1\121\2\14\6\0\1\14\1\0\14\14\22\0\2\14"+
                    "\27\0\1\122\1\123\76\0\1\124\65\0\1\125\10\0"+
                    "\1\126\53\0\5\14\1\0\3\14\2\0\5\14\1\127"+
                    "\1\14\6\0\1\14\1\0\14\14\22\0\2\14\5\0"+
                    "\5\14\1\0\3\14\2\0\1\130\6\14\6\0\1\14"+
                    "\1\0\14\14\22\0\2\14\5\0\5\14\1\0\3\14"+
                    "\2\0\4\14\1\131\2\14\6\0\1\14\1\0\1\132"+
                    "\13\14\22\0\2\14\5\0\5\14\1\0\3\14\2\0"+
                    "\7\14\6\0\1\14\1\0\13\14\1\133\22\0\2\14"+
                    "\5\0\5\14\1\0\3\14\2\0\3\14\1\134\1\135"+
                    "\2\14\6\0\1\14\1\0\1\136\5\14\1\137\5\14"+
                    "\22\0\2\14\5\0\5\14\1\0\3\14\2\0\5\14"+
                    "\1\140\1\14\6\0\1\14\1\0\14\14\22\0\2\14"+
                    "\5\0\5\14\1\0\3\14\2\0\4\14\1\141\2\14"+
                    "\6\0\1\14\1\0\1\142\13\14\22\0\2\14\5\0"+
                    "\5\14\1\0\3\14\2\0\1\143\6\14\6\0\1\14"+
                    "\1\0\12\14\1\144\1\14\22\0\2\14\5\0\5\14"+
                    "\1\0\3\14\2\0\7\14\6\0\1\14\1\0\12\14"+
                    "\1\145\1\14\22\0\2\14\54\0\1\146\52\0\1\147"+
                    "\76\0\1\150\24\0\1\151\51\0\1\152\25\0\1\153"+
                    "\102\0\1\154\105\0\1\155\100\0\1\156\77\0\1\157"+
                    "\3\0\31\73\1\160\1\161\44\73\32\74\1\162\2\74"+
                    "\1\160\41\74\26\0\1\163\1\164\65\0\1\165\76\0"+
                    "\1\166\66\0\1\104\2\0\1\167\1\0\1\104\2\0"+
                    "\1\167\66\0\1\170\4\0\1\170\71\0\3\171\2\0"+
                    "\1\171\4\0\1\171\4\0\1\171\10\0\2\171\3\0"+
                    "\1\171\1\0\1\171\37\0\1\104\4\0\1\104\100\0"+
                    "\1\172\100\0\1\173\1\174\62\0\5\14\1\0\3\14"+
                    "\2\0\7\14\6\0\1\14\1\0\10\14\1\175\1\176"+
                    "\2\14\22\0\2\14\5\0\5\14\1\0\3\14\2\0"+
                    "\6\14\1\177\6\0\1\14\1\0\14\14\22\0\2\14"+
                    "\5\0\5\14\1\0\3\14\2\0\7\14\6\0\1\14"+
                    "\1\0\4\14\1\200\7\14\22\0\2\14\5\0\5\14"+
                    "\1\0\3\14\2\0\7\14\6\0\1\14\1\0\10\14"+
                    "\1\201\3\14\22\0\2\14\5\0\5\14\1\0\3\14"+
                    "\2\0\7\14\6\0\1\14\1\0\3\14\1\202\10\14"+
                    "\22\0\2\14\5\0\5\14\1\0\3\14\2\0\7\14"+
                    "\6\0\1\14\1\0\10\14\1\203\3\14\22\0\2\14"+
                    "\5\0\5\14\1\0\3\14\2\0\7\14\6\0\1\14"+
                    "\1\0\5\14\1\204\6\14\22\0\2\14\55\0\1\205"+
                    "\76\0\1\206\26\0\5\14\1\0\3\14\2\0\6\14"+
                    "\1\207\6\0\1\14\1\0\14\14\22\0\2\14\5\0"+
                    "\5\14\1\0\3\14\2\0\1\14\1\210\5\14\6\0"+
                    "\1\14\1\0\14\14\22\0\2\14\5\0\5\14\1\0"+
                    "\3\14\2\0\7\14\6\0\1\14\1\0\7\14\1\211"+
                    "\4\14\22\0\2\14\5\0\5\14\1\0\3\14\2\0"+
                    "\7\14\6\0\1\14\1\0\14\14\22\0\1\212\1\14"+
                    "\5\0\5\14\1\0\3\14\2\0\3\14\1\213\3\14"+
                    "\6\0\1\14\1\0\14\14\22\0\2\14\5\0\5\14"+
                    "\1\0\3\14\2\0\5\14\1\214\1\14\6\0\1\14"+
                    "\1\0\14\14\22\0\2\14\5\0\5\14\1\0\3\14"+
                    "\2\0\1\215\6\14\6\0\1\14\1\0\14\14\22\0"+
                    "\2\14\5\0\5\14\1\0\3\14\2\0\7\14\6\0"+
                    "\1\14\1\0\3\14\1\216\10\14\22\0\2\14\5\0"+
                    "\5\14\1\0\3\14\2\0\5\14\1\217\1\14\6\0"+
                    "\1\14\1\0\14\14\22\0\2\14\5\0\5\14\1\0"+
                    "\3\14\2\0\7\14\6\0\1\14\1\0\10\14\1\220"+
                    "\3\14\22\0\2\14\5\0\5\14\1\0\3\14\2\0"+
                    "\5\14\1\221\1\14\6\0\1\14\1\0\14\14\22\0"+
                    "\2\14\5\0\5\14\1\0\3\14\2\0\7\14\6\0"+
                    "\1\14\1\0\4\14\1\222\3\14\1\223\3\14\22\0"+
                    "\2\14\5\0\5\14\1\0\3\14\2\0\7\14\6\0"+
                    "\1\14\1\0\6\14\1\224\5\14\22\0\1\14\1\225"+
                    "\5\0\5\14\1\0\3\14\2\0\1\14\1\226\5\14"+
                    "\6\0\1\14\1\0\14\14\22\0\2\14\5\0\5\14"+
                    "\1\0\3\14\2\0\1\14\1\227\1\14\1\230\3\14"+
                    "\6\0\1\14\1\0\14\14\22\0\2\14\2\0\2\73"+
                    "\1\0\1\73\1\0\71\73\1\0\2\74\1\0\1\74"+
                    "\1\0\71\74\30\163\1\231\46\163\1\232\2\0\13\232"+
                    "\1\233\60\232\26\0\1\234\56\0\1\170\1\0\1\101"+
                    "\2\0\1\170\4\0\1\101\64\0\2\171\1\235\1\0"+
                    "\1\236\1\171\1\0\1\237\2\0\1\235\4\0\1\171"+
                    "\10\0\2\171\3\0\1\171\1\0\1\171\1\0\1\236"+
                    "\47\0\1\240\102\0\1\241\56\0\5\14\1\0\3\14"+
                    "\2\0\7\14\6\0\1\14\1\0\6\14\1\242\5\14"+
                    "\22\0\2\14\5\0\5\14\1\0\3\14\2\0\1\14"+
                    "\1\243\5\14\6\0\1\14\1\0\14\14\22\0\2\14"+
                    "\5\0\5\14\1\0\3\14\2\0\1\14\1\244\5\14"+
                    "\6\0\1\14\1\0\14\14\22\0\2\14\5\0\5\14"+
                    "\1\0\3\14\2\0\4\14\1\245\2\14\6\0\1\14"+
                    "\1\0\14\14\22\0\2\14\5\0\5\14\1\0\3\14"+
                    "\2\0\1\14\1\246\5\14\6\0\1\14\1\0\1\247"+
                    "\13\14\22\0\2\14\5\0\5\14\1\0\3\14\2\0"+
                    "\7\14\6\0\1\14\1\0\1\250\13\14\22\0\2\14"+
                    "\5\0\5\14\1\0\3\14\2\0\7\14\6\0\1\14"+
                    "\1\0\1\251\13\14\22\0\2\14\5\0\5\14\1\0"+
                    "\3\14\2\0\7\14\6\0\1\14\1\0\1\14\1\252"+
                    "\12\14\22\0\2\14\5\0\5\14\1\0\3\14\2\0"+
                    "\7\14\6\0\1\14\1\0\10\14\1\253\3\14\22\0"+
                    "\2\14\5\0\5\14\1\0\3\14\2\0\7\14\6\0"+
                    "\1\14\1\0\1\254\13\14\22\0\2\14\5\0\5\14"+
                    "\1\0\3\14\2\0\7\14\6\0\1\14\1\0\4\14"+
                    "\1\255\7\14\22\0\2\14\5\0\5\14\1\0\3\14"+
                    "\2\0\7\14\6\0\1\14\1\0\7\14\1\256\4\14"+
                    "\22\0\2\14\5\0\5\14\1\0\3\14\2\0\3\14"+
                    "\1\257\3\14\6\0\1\14\1\0\14\14\22\0\2\14"+
                    "\5\0\5\14\1\0\3\14\2\0\7\14\6\0\1\14"+
                    "\1\0\10\14\1\260\3\14\22\0\2\14\5\0\5\14"+
                    "\1\0\3\14\2\0\1\14\1\261\5\14\6\0\1\14"+
                    "\1\0\14\14\22\0\2\14\5\0\5\14\1\0\3\14"+
                    "\2\0\7\14\6\0\1\14\1\0\7\14\1\262\4\14"+
                    "\22\0\2\14\5\0\5\14\1\0\3\14\2\0\1\14"+
                    "\1\263\5\14\6\0\1\14\1\0\14\14\22\0\2\14"+
                    "\5\0\5\14\1\0\3\14\2\0\5\14\1\264\1\14"+
                    "\6\0\1\14\1\0\14\14\22\0\2\14\5\0\5\14"+
                    "\1\0\3\14\2\0\5\14\1\265\1\14\6\0\1\14"+
                    "\1\0\14\14\22\0\2\14\5\0\5\14\1\0\3\14"+
                    "\2\0\7\14\6\0\1\14\1\0\3\14\1\266\10\14"+
                    "\22\0\2\14\1\0\27\163\1\231\1\267\46\163\1\232"+
                    "\2\0\74\232\1\233\1\270\1\271\74\233\26\0\1\272"+
                    "\1\234\55\0\2\171\1\235\1\167\1\236\1\171\1\0"+
                    "\1\237\1\167\1\0\1\235\4\0\1\171\10\0\2\171"+
                    "\3\0\1\171\1\0\1\171\1\0\1\236\35\0\3\273"+
                    "\2\0\1\273\4\0\1\273\4\0\1\273\10\0\2\273"+
                    "\3\0\1\273\1\0\1\273\52\0\1\274\102\0\1\275"+
                    "\55\0\5\14\1\0\3\14\2\0\1\276\6\14\6\0"+
                    "\1\14\1\0\14\14\22\0\2\14\5\0\5\14\1\0"+
                    "\3\14\2\0\7\14\6\0\1\14\1\0\1\277\13\14"+
                    "\22\0\2\14\5\0\5\14\1\0\3\14\2\0\3\14"+
                    "\1\300\3\14\6\0\1\14\1\0\14\14\22\0\2\14"+
                    "\5\0\5\14\1\0\3\14\2\0\1\301\6\14\6\0"+
                    "\1\14\1\0\14\14\22\0\2\14\5\0\5\14\1\0"+
                    "\3\14\2\0\7\14\6\0\1\14\1\0\6\14\1\302"+
                    "\5\14\22\0\2\14\5\0\5\14\1\0\3\14\2\0"+
                    "\7\14\6\0\1\14\1\0\2\14\1\303\11\14\22\0"+
                    "\2\14\5\0\5\14\1\0\3\14\2\0\7\14\6\0"+
                    "\1\14\1\0\3\14\1\304\10\14\22\0\2\14\5\0"+
                    "\5\14\1\0\3\14\2\0\6\14\1\305\6\0\1\14"+
                    "\1\0\14\14\22\0\2\14\5\0\5\14\1\0\3\14"+
                    "\2\0\7\14\6\0\1\14\1\0\7\14\1\306\4\14"+
                    "\22\0\2\14\5\0\5\14\1\0\3\14\2\0\7\14"+
                    "\6\0\1\14\1\0\3\14\1\307\10\14\22\0\2\14"+
                    "\5\0\5\14\1\0\3\14\2\0\1\14\1\310\5\14"+
                    "\6\0\1\14\1\0\14\14\22\0\2\14\5\0\5\14"+
                    "\1\0\3\14\2\0\7\14\6\0\1\14\1\0\10\14"+
                    "\1\311\3\14\22\0\2\14\5\0\5\14\1\0\3\14"+
                    "\2\0\7\14\6\0\1\14\1\0\3\14\1\312\10\14"+
                    "\22\0\2\14\5\0\5\14\1\0\3\14\2\0\3\14"+
                    "\1\313\3\14\6\0\1\14\1\0\14\14\22\0\2\14"+
                    "\5\0\5\14\1\0\3\14\2\0\7\14\6\0\1\14"+
                    "\1\0\12\14\1\314\1\14\22\0\2\14\5\0\5\14"+
                    "\1\0\3\14\2\0\1\14\1\315\5\14\6\0\1\14"+
                    "\1\0\14\14\22\0\2\14\3\0\1\271\77\0\1\271"+
                    "\12\0\1\316\60\0\77\272\6\0\2\273\1\317\1\0"+
                    "\1\236\1\273\4\0\1\317\4\0\1\273\10\0\2\273"+
                    "\3\0\1\273\1\0\1\273\1\0\1\236\51\0\1\320"+
                    "\73\0\1\321\63\0\5\14\1\0\3\14\2\0\5\14"+
                    "\1\322\1\14\6\0\1\14\1\0\14\14\22\0\2\14"+
                    "\5\0\5\14\1\0\3\14\2\0\7\14\6\0\1\14"+
                    "\1\0\10\14\1\323\3\14\22\0\2\14\5\0\5\14"+
                    "\1\0\3\14\2\0\7\14\6\0\1\14\1\0\5\14"+
                    "\1\324\6\14\22\0\2\14\5\0\5\14\1\0\3\14"+
                    "\2\0\7\14\6\0\1\14\1\0\3\14\1\325\10\14"+
                    "\22\0\2\14\5\0\5\14\1\0\3\14\2\0\7\14"+
                    "\6\0\1\14\1\0\1\326\13\14\22\0\2\14\5\0"+
                    "\5\14\1\0\3\14\2\0\7\14\6\0\1\14\1\0"+
                    "\12\14\1\327\1\14\22\0\2\14\5\0\5\14\1\0"+
                    "\3\14\2\0\7\14\6\0\1\14\1\0\3\14\1\330"+
                    "\10\14\22\0\2\14\5\0\5\14\1\0\3\14\2\0"+
                    "\3\14\1\331\3\14\6\0\1\14\1\0\14\14\22\0"+
                    "\2\14\5\0\5\14\1\0\3\14\2\0\5\14\1\332"+
                    "\1\14\6\0\1\14\1\0\14\14\22\0\2\14\17\0"+
                    "\1\333\66\0\2\273\1\317\1\167\1\236\1\273\2\0"+
                    "\1\167\1\0\1\317\4\0\1\273\10\0\2\273\3\0"+
                    "\1\273\1\0\1\273\1\0\1\236\52\0\1\334\73\0"+
                    "\1\335\62\0\5\14\1\0\3\14\2\0\7\14\6\0"+
                    "\1\14\1\0\10\14\1\336\3\14\22\0\2\14\5\0"+
                    "\5\14\1\0\3\14\2\0\7\14\6\0\1\14\1\0"+
                    "\14\14\22\0\1\14\1\337\5\0\5\14\1\0\3\14"+
                    "\2\0\4\14\1\340\2\14\6\0\1\14\1\0\14\14"+
                    "\22\0\2\14\5\0\5\14\1\0\3\14\2\0\7\14"+
                    "\6\0\1\14\1\0\6\14\1\341\5\14\22\0\2\14"+
                    "\17\0\1\233\104\0\1\342\73\0\1\343\61\0\5\14"+
                    "\1\0\3\14\2\0\5\14\1\344\1\14\6\0\1\14"+
                    "\1\0\14\14\22\0\2\14\5\0\5\14\1\0\3\14"+
                    "\2\0\1\14\1\345\5\14\6\0\1\14\1\0\14\14"+
                    "\22\0\2\14\4\0\1\346\115\0\1\347\54\0\1\346"+
                    "\2\0\74\346\23\0\1\350\77\0\1\351\55\0\1\352"+
                    "\73\0\1\352\2\0\74\352";

    private static int [] zzUnpackTrans() {
        int [] result = new int[10395];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int [] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
            "Unknown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\1\0\1\1\5\0\1\11\1\1\1\11\3\1\1\11"+
                    "\14\1\2\11\1\1\1\11\16\1\2\11\1\1\6\11"+
                    "\1\1\1\11\2\1\1\11\3\1\1\0\1\11\3\1"+
                    "\1\0\16\1\1\11\1\0\1\11\2\0\17\1\13\11"+
                    "\4\0\1\1\2\0\2\1\1\11\2\0\10\1\2\11"+
                    "\22\1\1\0\2\1\1\0\1\1\4\0\26\1\2\0"+
                    "\2\1\2\0\20\1\1\0\1\1\2\0\11\1\3\0"+
                    "\5\1\1\0\3\1\2\0\2\1";

    private static int [] zzUnpackAttribute() {
        int [] result = new int[234];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int [] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /** the input device */
    private Reader zzReader;

    /** the current state of the DFA */
    private int zzState;

    /** the current lexical state */
    private int zzLexicalState = YYINITIAL;

    /** this buffer contains the current text to be matched and is
     the source of the yytext() string */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

    /** the textposition at the last accepting state */
    private int zzMarkedPos;

    /** the current text position in the buffer */
    private int zzCurrentPos;

    /** startRead marks the beginning of the yytext() string in the buffer */
    private int zzStartRead;

    /** endRead marks the last character in the buffer, that has been read
     from input */
    private int zzEndRead;

    /** number of newlines encountered up to the start of the matched text */
    private int yyline;

    /** the number of characters up to the start of the matched text */
    private int yychar;

    /**
     * the number of characters from the last newline up to the start of the
     * matched text
     */
    private int yycolumn;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /** zzAtEOF == true <=> the scanner is at the EOF */
    private boolean zzAtEOF;

    /** denotes if the user-EOF-code has already been executed */
    private boolean zzEOFDone;

    /**
     * The number of occupied positions in zzBuffer beyond zzEndRead.
     * When a lead/high surrogate has been read from the input stream
     * into the final zzBuffer position, this will have a value of 1;
     * otherwise, it will have a value of 0.
     */
    private int zzFinalHighSurrogate = 0;

  /* user code: */


    static class CharSeqReader extends Reader
    {
        int offset = 0;
        CharSequence src;

        CharSeqReader(CharSequence src)
        {
            this.src = src;
        }

        @Override
        public void close() throws IOException
        {
            src = null;
            offset = 0;
        }

        @Override
        public int read(char[] chars, int i, int i1) throws IOException
        {
            int len = Math.min(src.length() - offset, i1);
            for (int n = 0; n < len; n++)
            {
                try{
                    char c = src.charAt(offset++);
                    chars[i++] = c;
                }catch(Exception e){

                }
            }
            if (len <= 0)
                return  -1;
            return len;
        }
    }

    public LuaLexer(CharSequence src) {
        this(new CharSeqReader(src));
    }

    public int yyline(){
        return yyline;
    }
    public int yycolumn(){
        return yycolumn;
    }
    public int yychar(){
        return yychar;
    }
    private int nBrackets = 0;
    private boolean checkAhead(char c, int offset) {
        return this.zzMarkedPos + offset >= this.zzBuffer.length ? false : this.zzBuffer[this.zzMarkedPos + offset] == c;
    }

    private boolean checkBlock() {
        nBrackets = 0;
        if (checkAhead('[', 0)) {
            int n = 0;
            while (checkAhead('=', n + 1)) n++;
            if (checkAhead('[', n + 1)) {
                nBrackets = n;
                return true;
            }
        }
        return false;
    }

    private int checkBlockRedundant() {
        int redundant = -1;
        String cs = yytext().toString();
        StringBuilder s = new StringBuilder("]");
        for (int i = 0; i < nBrackets; i++) s.append('=');
        s.append(']');
        int index = cs.indexOf(s.toString());
        if (index > 0)
            redundant = yylength() - index - nBrackets - 2;
        return redundant;
    }


    /**
     * Creates a new scanner
     *
     * @param   in  the java.io.Reader to read input from.
     */
    public LuaLexer(Reader in) {
        this.zzReader = in;
    }


    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed   the packed character translation table
     * @return         the unpacked character translation table
     */
    private static char [] zzUnpackCMap(String packed) {
        char [] map = new char[0x110000];
        int i = 0;  /* index in packed string  */
        int j = 0;  /* index in unpacked array */
        while (i < 2886) {
            int  count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do map[j++] = value; while (--count > 0);
        }
        return map;
    }


    /**
     * Refills the input buffer.
     *
     * @return      <code>false</code>, iff there was new input.
     *
     * @exception   IOException  if any I/O-Error occurs
     */
    private boolean zzRefill() throws IOException {

    /* first: make room (if you can) */
        if (zzStartRead > 0) {
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
            System.arraycopy(zzBuffer, zzStartRead,
                    zzBuffer, 0,
                    zzEndRead-zzStartRead);

      /* translate stored positions */
            zzEndRead-= zzStartRead;
            zzCurrentPos-= zzStartRead;
            zzMarkedPos-= zzStartRead;
            zzStartRead = 0;
        }

    /* is the buffer big enough? */
        if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
            char newBuffer[] = new char[zzBuffer.length*2];
            System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
            zzBuffer = newBuffer;
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
        }

    /* fill the buffer with new input */
        int requested = zzBuffer.length - zzEndRead;
        int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
        if (numRead == 0) {
            throw new IOException("Reader returned 0 characters. See JFlex examples for workaround.");
        }
        if (numRead > 0) {
            zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
            if (numRead == requested) {
                if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
                    --zzEndRead;
                    zzFinalHighSurrogate = 1;
                }
            }
      /* potentially more input available */
            return false;
        }

    /* numRead < 0 ==> end of stream */
        return true;
    }


    /**
     * Closes the input stream.
     */
    public final void yyclose() throws IOException {
        zzAtEOF = true;            /* indicate end of file */
        zzEndRead = zzStartRead;  /* invalidate buffer    */

        if (zzReader != null)
            zzReader.close();
    }


    /**
     * Resets the scanner to read from a new input stream.
     * Does not close the old reader.
     *
     * All internal variables are reset, the old input stream
     * <b>cannot</b> be reused (internal buffer is discarded and lost).
     * Lexical state is set to <tt>ZZ_INITIAL</tt>.
     *
     * Internal scan buffer is resized down to its initial length, if it has grown.
     *
     * @param reader   the new input stream
     */
    public final void yyreset(Reader reader) {
        zzReader = reader;
        zzAtBOL  = true;
        zzAtEOF  = false;
        zzEOFDone = false;
        zzEndRead = zzStartRead = 0;
        zzCurrentPos = zzMarkedPos = 0;
        zzFinalHighSurrogate = 0;
        yyline = yychar = yycolumn = 0;
        zzLexicalState = YYINITIAL;
        if (zzBuffer.length > ZZ_BUFFERSIZE)
            zzBuffer = new char[ZZ_BUFFERSIZE];
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final String yytext() {
        return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
    }


    /**
     * Returns the character at position <tt>pos</tt> from the
     * matched text.
     *
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     *
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer[zzStartRead+pos];
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos-zzStartRead;
    }


    /**
     * Reports an error that occured while scanning.
     *
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     *
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param   errorCode  the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        }
        catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     *
     * They will be read again by then next call of the scanning method
     *
     * @param number  the number of characters to be read again.
     *                This number must not be greater than yylength()!
     */
    public void yypushback(int number)  {
        if ( number > yylength() )
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return      the next token
     * @exception   IOException  if any I/O-Error occurs
     */
    public LuaTokenTypes advance() throws IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char [] zzBufferL = zzBuffer;
        char [] zzCMapL = ZZ_CMAP;

        int [] zzTransL = ZZ_TRANS;
        int [] zzRowMapL = ZZ_ROWMAP;
        int [] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            yychar+= zzMarkedPosL-zzStartRead;

            boolean zzR = false;
            int zzCh;
            int zzCharCount;
            for (zzCurrentPosL = zzStartRead  ;
                 zzCurrentPosL < zzMarkedPosL ;
                 zzCurrentPosL += zzCharCount ) {
                zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
                zzCharCount = Character.charCount(zzCh);
                switch (zzCh) {
                    case '\u000B':
                    case '\u000C':
                    case '\u0085':
                    case '\u2028':
                    case '\u2029':
                        yyline++;
                        yycolumn = 0;
                        zzR = false;
                        break;
                    case '\r':
                        yyline++;
                        yycolumn = 0;
                        zzR = true;
                        break;
                    case '\n':
                        if (zzR)
                            zzR = false;
                        else {
                            yyline++;
                            yycolumn = 0;
                        }
                        break;
                    default:
                        zzR = false;
                        yycolumn += zzCharCount;
                }
            }

            if (zzR) {
                // peek one character ahead if it is \n (if we have counted one line too much)
                boolean zzPeek;
                if (zzMarkedPosL < zzEndReadL)
                    zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                else if (zzAtEOF)
                    zzPeek = false;
                else {
                    boolean eof = zzRefill();
                    zzEndReadL = zzEndRead;
                    zzMarkedPosL = zzMarkedPos;
                    zzBufferL = zzBuffer;
                    if (eof)
                        zzPeek = false;
                    else
                        zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                }
                if (zzPeek) yyline--;
            }
            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ( (zzAttributes & 1) == 1 ) {
                zzAction = zzState;
            }


            zzForAction: {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                        zzCurrentPosL += Character.charCount(zzInput);
                    }
                    else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    }
                    else {
                        // store back cached positions
                        zzCurrentPos  = zzCurrentPosL;
                        zzMarkedPos   = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL  = zzCurrentPos;
                        zzMarkedPosL   = zzMarkedPos;
                        zzBufferL      = zzBuffer;
                        zzEndReadL     = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        }
                        else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ( (zzAttributes & 1) == 1 ) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ( (zzAttributes & 8) == 8 ) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                return null;
            }
            else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1:
                    { yybegin(YYINITIAL); return SHEBANG_CONTENT;
                    }
                    case 88: break;
                    case 2:
                    { return BAD_CHARACTER;
                    }
                    case 89: break;
                    case 3:
                    { return NEW_LINE;
                    }
                    case 90: break;
                    case 4:
                    { return WHITE_SPACE;
                    }
                    case 91: break;
                    case 5:
                    { return NAME;
                    }
                    case 92: break;
                    case 6:
                    { return NUMBER;
                    }
                    case 93: break;
                    case 7:
                    { return PLUS;
                    }
                    case 94: break;
                    case 8:
                    { return DOT;
                    }
                    case 95: break;
                    case 9:
                    { return MINUS;
                    }
                    case 96: break;
                    case 10:
                    { return LBRACK;
                    }
                    case 97: break;
                    case 11:
                    { return ASSIGN;
                    }
                    case 98: break;
                    case 12:
                    { return RBRACK;
                    }
                    case 99: break;
                    case 13:
                    { yybegin(xDOUBLE_QUOTED_STRING); yypushback(yylength());
                    }
                    case 100: break;
                    case 14:
                    { yybegin(xSINGLE_QUOTED_STRING); yypushback(yylength());
                    }
                    case 101: break;
                    case 15:
                    { return GETN;
                    }
                    case 102: break;
                    case 16:
                    { return NOT;
                    }
                    case 103: break;
                    case 17:
                    { return GT;
                    }
                    case 104: break;
                    case 18:
                    { return LT;
                    }
                    case 105: break;
                    case 19:
                    { return BIT_TILDE;
                    }
                    case 106: break;
                    case 20:
                    { return MULT;
                    }
                    case 107: break;
                    case 21:
                    { return MOD;
                    }
                    case 108: break;
                    case 22:
                    { return DIV;
                    }
                    case 109: break;
                    case 23:
                    { return LPAREN;
                    }
                    case 110: break;
                    case 24:
                    { return RPAREN;
                    }
                    case 111: break;
                    case 25:
                    { return LCURLY;
                    }
                    case 112: break;
                    case 26:
                    { return RCURLY;
                    }
                    case 113: break;
                    case 27:
                    { return COMMA;
                    }
                    case 114: break;
                    case 28:
                    { return SEMI;
                    }
                    case 115: break;
                    case 29:
                    { return COLON;
                    }
                    case 116: break;
                    case 30:
                    { return EXP;
                    }
                    case 117: break;
                    case 31:
                    { return BIT_AND;
                    }
                    case 118: break;
                    case 32:
                    { return BIT_OR;
                    }
                    case 119: break;
                    case 33:
                    { return AT;
                    }
                    case 120: break;
                    case 34:
                    { yybegin(YYINITIAL); return STRING;
                    }
                    case 121: break;
                    case 35:
                    { yypushback(yylength()); yybegin(xCOMMENT);
                    }
                    case 122: break;
                    case 36:
                    { return CONCAT;
                    }
                    case 123: break;
                    case 37:
                    { boolean block = checkBlock();
                        if (block) { yypushback(yylength()); yybegin(xBLOCK_COMMENT); }
                        else { yypushback(yylength()); yybegin(xCOMMENT); }
                    }
                    case 124: break;
                    case 38:
                    { return IN;
                    }
                    case 125: break;
                    case 39:
                    { return IF;
                    }
                    case 126: break;
                    case 40:
                    { return OR;
                    }
                    case 127: break;
                    case 41:
                    { return DO;
                    }
                    case 128: break;
                    case 42:
                    { yybegin(xBLOCK_STRING); yypushback(yylength()); checkBlock();
                    }
                    case 129: break;
                    case 43:
                    { return EQ;
                    }
                    case 130: break;
                    case 44:
                    { yybegin(xSHEBANG); return SHEBANG;
                    }
                    case 131: break;
                    case 45:
                    { return NE;
                    }
                    case 132: break;
                    case 46:
                    { return GE;
                    }
                    case 133: break;
                    case 47:
                    { return BIT_RTRT;
                    }
                    case 134: break;
                    case 48:
                    { return LE;
                    }
                    case 135: break;
                    case 49:
                    { return BIT_LTLT;
                    }
                    case 136: break;
                    case 50:
                    { return DOUBLE_DIV;
                    }
                    case 137: break;
                    case 51:
                    { return DOUBLE_COLON;
                    }
                    case 138: break;
                    case 52:
                    { return AND;
                    }
                    case 139: break;
                    case 53:
                    { yybegin(YYINITIAL);return SHORT_COMMENT;
                    }
                    case 140: break;
                    case 54:
                    { return ELLIPSIS;
                    }
                    case 141: break;
                    case 55:
                    { return END;
                    }
                    case 142: break;
                    case 56:
                    { return NIL;
                    }
                    case 143: break;
                    case 57:
                    { return LEF;
                    }
                    case 144: break;
                    case 58:
                    { return MEAN;
                    }
                    case 145: break;
                    case 59:
                    { return FOR;
                    }
                    case 146: break;
                    case 60:
                    { return TRY;
                    }
                    case 147: break;
                    case 61:
                    { yybegin(YYINITIAL);return DOC_COMMENT;
                    }
                    case 148: break;
                    case 62:
                    { return ELSE;
                    }
                    case 149: break;
                    case 63:
                    { return GOTO;
                    }
                    case 150: break;
                    case 64:
                    { return CASE;
                    }
                    case 151: break;
                    case 65:
                    { return TRUE;
                    }
                    case 152: break;
                    case 66:
                    { return THEN;
                    }
                    case 153: break;
                    case 67:
                    { return WHEN;
                    }
                    case 154: break;
                    case 68:
                    { int redundant = checkBlockRedundant();
                        if (redundant != -1) {
                            yypushback(redundant);
                            yybegin(YYINITIAL); return LONG_STRING;
                        } else {
                            yybegin(YYINITIAL); return BAD_CHARACTER;
                        }
                    }
                    case 155: break;
                    case 69:
                    { int redundant = checkBlockRedundant();
                        if (redundant != -1) {
                            yypushback(redundant);
                            yybegin(YYINITIAL);return BLOCK_COMMENT; }
                        else { yybegin(YYINITIAL);return BLOCK_COMMENT; }
                    }
                    case 156: break;
                    case 70:
                    { return DEFER;
                    }
                    case 157: break;
                    case 71:
                    { return BREAK;
                    }
                    case 158: break;
                    case 72:
                    { return LOCAL;
                    }
                    case 159: break;
                    case 73:
                    { return FALSE;
                    }
                    case 160: break;
                    case 74:
                    { return UNTIL;
                    }
                    case 161: break;
                    case 75:
                    { return CATCH;
                    }
                    case 162: break;
                    case 76:
                    { return WHILE;
                    }
                    case 163: break;
                    case 77:
                    { return RETURN;
                    }
                    case 164: break;
                    case 78:
                    { return REPEAT;
                    }
                    case 165: break;
                    case 79:
                    { return ELSEIF;
                    }
                    case 166: break;
                    case 80:
                    { return LAMBDA;
                    }
                    case 167: break;
                    case 81:
                    { return SWITCH;
                    }
                    case 168: break;
                    case 82:
                    { return DEFAULT;
                    }
                    case 169: break;
                    case 83:
                    { return FINALLY;
                    }
                    case 170: break;
                    case 84:
                    { return REGION;
                    }
                    case 171: break;
                    case 85:
                    { return FUNCTION;
                    }
                    case 172: break;
                    case 86:
                    { return CONTINUE;
                    }
                    case 173: break;
                    case 87:
                    { return ENDREGION;
                    }
                    case 174: break;
                    default:
                        zzScanError(ZZ_NO_MATCH);
                }
            }
        }
    }


}
